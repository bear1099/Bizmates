let sketch=p=>{let frameRate=30,canvas,mobWidth=screen.availWidth-32,mobHeight=Math.floor(.75*mobWidth),simCanvasSize=screen.availWidth>672?{width:640,height:480}:{width:mobWidth,height:mobHeight};const statusColor={1:"#ffff00",2:"#ff0000",3:"#00ff00",4:"#808080"};let balls,ballsInfectionTime=[],diameter=10,diameterSqrd=100,spring=.1,numBalls,recoveryTimeInMillis,infectionProbability,speed,detectionSuccessRate;const status={SUSCEPTIBLE:1,INFECTIOUS:2,RECOVERED:3,QUARANTINED:4},defaultValues={popsize:300,recoveryTimeInMillis:2e3,infectionProbability:1,speed:2,detectionSuccessRate:.5};function getRandom(ave){for(var a=0,b=0;0===a;)a=Math.random();for(;0===b;)b=Math.random();var c=Math.sqrt(-2*Math.log(a));return(c=c*Math.sin(2*Math.PI*b)*900+ave)<0&&(c=0),Math.floor(c)}p.getNumberOfBalls=()=>numBalls,p.getDefaultValues=()=>defaultValues,p.getStatus=()=>status,p.getStatusArray=()=>{let statuses=[];for(let i=0;i<balls.length;i++)statuses[i]=balls[i].status;return statuses},p.checkForRecovered=()=>{ballsInfectionTime.forEach(ball=>{var value=getRandom(recoveryTimeInMillis);void 0!==ball.time&&Date.now()-ball.time>value&&(ball.time=void 0,balls[ball.index].status=status.RECOVERED)})},p.checkForDetection=()=>{ballsInfectionTime.forEach((function(ball,index){balls[ball.index].status===status.INFECTIOUS&&detectionSuccessRate>Math.random()&&(balls[ball.index].status=status.QUARANTINED,ballsInfectionTime.splice(index,1))}))},p.setup=function(){canvas=p.createCanvas(simCanvasSize.width,simCanvasSize.height),canvas.parent("sirsim-container"),p.frameRate(30),this.reset()},p.reset=function(args){canvas.mouseClicked(function(){let playing=!0,stopTime;return()=>{if(playing)playing=!1,stopTime=Date.now(),p.noLoop(),graph&&graph._setupDone&&graph.noLoop();else{playing=!0;let delta=Date.now()-stopTime;ballsInfectionTime.forEach(ball=>{ball.time&&(ball.time+=delta)}),p.loop(),graph&&graph._setupDone&&graph.loop()}}}()),playing=!0,p.loop(),balls=[],ballsInfectionTime=[],numBalls=args&&args.popsize?args.popsize:defaultValues.popsize,recoveryTimeInMillis=args&&args.recoveryTimeInMillis?args.recoveryTimeInMillis:defaultValues.recoveryTimeInMillis,infectionProbability=args&&args.infectionProbability?args.infectionProbability:defaultValues.infectionProbability,speed=args&&args.speed?args.speed:defaultValues.speed,detectionSuccessRate=args&&args.detectionSuccessRate?args.detectionSuccessRate:defaultValues.detectionSuccessRate;for(let i=0;i<numBalls;i++)balls[i]=new Ball(p.random(p.width),p.random(p.height),10,i,balls,status.SUSCEPTIBLE);balls[numBalls-1].status=status.INFECTIOUS,ballsInfectionTime.push({time:Date.now(),index:numBalls-1}),graph&&graph._setupDone&&graph.reset()},p.draw=function(){p.background(0,87,255),p.checkForRecovered(),balls.forEach(ball=>{p.push(),p.noStroke(),p.fill(statusColor[ball.status]),ball.collide(),ball.move(),ball.display(),p.pop()}),p.checkForDetection()};class Ball{constructor(xin,yin,din,idin,oin,status){this.x=xin,this.y=yin,this.vx=p.random(-1,1)*speed,this.vy=p.random(-1,1)*speed,this.diameter=din,this.id=idin,this.others=oin,this.status=status}collide(){for(let i=0;i<numBalls;i++){let dx=this.others[i].x-this.x,dy=this.others[i].y-this.y,distanceSqrd;if(dx**2+dy**2<100){let angle=p.atan2(dy,dx),targetX=this.x+10*p.cos(angle),targetY=this.y+10*p.sin(angle),ax=.1*(targetX-this.others[i].x),ay=.1*(targetY-this.others[i].y);this.vx-=ax,this.vy-=ay,this.others[i].vx+=ax,this.others[i].vy+=ay,this.checkForStatusChange(i)}}}checkForStatusChange(otherBallIndex){this.status===status.SUSCEPTIBLE&&this.others[otherBallIndex].status===status.INFECTIOUS&&Math.random()<=infectionProbability&&(this.status=status.INFECTIOUS,ballsInfectionTime.push({time:Date.now(),index:this.id}))}move(){this.x+=this.vx,this.y+=this.vy,this.x+this.diameter/2>p.width?(this.x=p.width-this.diameter/2,this.vx*=-1):this.x-this.diameter/2<0&&(this.x=this.diameter/2,this.vx*=-1),this.y+this.diameter/2>p.height?(this.y=p.height-this.diameter/2,this.vy*=-1):this.y-this.diameter/2<0&&(this.y=this.diameter/2,this.vy*=-1)}display(){p.circle(this.x,this.y,10)}}};